(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{420:function(t,a,e){"use strict";e.r(a);var s=e(56),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"dp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dp"}},[t._v("#")]),t._v(" DP")]),t._v(" "),e("h2",{attrs:{id:"index"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#index"}},[t._v("#")]),t._v(" # Index.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n[o] 백준 1463번, 1로 만들기\n\n")])])]),e("h3",{attrs:{id:"백준-1463번-1로-만들기"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#백준-1463번-1로-만들기"}},[t._v("#")]),t._v(" # 백준 1463번, 1로 만들기")]),t._v(" "),e("p",[t._v("하도 올해 초에 그래프만 풀다보니까 당연히 BFS로 풀면 풀리겠다 싶었다. "),e("code",[t._v("1로 만들기 2")]),t._v("는 BFS가 어울리는 문제인데, 이건 굳이 그래프로 풀라는 의도가 있는 문제는 아닌 것 같다.")]),t._v(" "),e("p",[t._v("(대충 cpp로 그래프 짠 코드)")]),t._v(" "),e("p",[t._v("DP로 생각할 수 있는 이유와, 그렇게 하지 않았을 시에 왜 시간초과가 날 것이고, 어떤 과정을 밟아야하나.")]),t._v(" "),e("p",[t._v("그동안 DP를 풀었을 떄, 다시 연산이 필요한 과정을 시도는 하되, 이전에 연산한 경우면 다시 연산을 하지 않는다는 특징이 있었다. 그리고 모든 경우를 위든 아래든 쭉 ㄱㄱ 한다.")]),t._v(" "),e("p",[t._v("자, x는 최대 100만까지다. 이 칭구는 무슨 경우를 거쳐서 1이 된다. 1을 오지게 빼서든지 오지게 2랑 3으로 나눠서든지. 이 모든 경우를 생각하면 ... (후략)")])])}),[],!1,null,null,null);a.default=r.exports}}]);